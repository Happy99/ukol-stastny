{"ast":null,"code":"var _jsxFileName = \"/Users/petrstastny/Desktop/testApps/safecontrol-ukol/ukol-stastny/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { TableHead } from './TableHead';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst numberOfObjects = 10;\nconst colorIdents = [{\n  ident: 'un',\n  props: {\n    color: 'red'\n  }\n}, {\n  ident: 'deux',\n  props: {\n    color: 'green'\n  }\n}, {\n  ident: 'trois',\n  props: {\n    color: 'blue'\n  }\n}];\nconst alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\nconst getRandomNumber = () => {\n  const randomDecimal = Math.random();\n\n  // Scale the random decimal to the range [0, 1, 2]\n  const randomNumber = Math.floor(randomDecimal * 3); // 3 because we want numbers from 0 to 2\n  return randomNumber;\n};\nconst getRandomIntMinMax = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min); // The maximum is exclusive and the minimum is inclusive\n};\n\nconst generateRandomWord = () => {\n  let randomWord = '';\n  alphabet.map(word => {\n    randomWord += alphabet[getRandomIntMinMax(0, alphabet.length)];\n  });\n  return randomWord;\n};\nconst makeUniqueId = (base, i) => `${base}-${i}`;\n\n// vyresit colors: any - zkusit nadefinovat vlastni typ\nconst randomColorIdentifier = colors => {\n  let randomArrayIndex = getRandomNumber();\n  // nekontroluju delku pole, vim, ze se vejdu\n  return colors[randomArrayIndex].ident;\n};\nexport default function App() {\n  _s();\n  const [objectsArray, setObjectsArray] = useState([]);\n  const [filteredObjectsArray, setFilteredObjectsArray] = useState([]);\n  const [tableDataColoredCells, setTableDataColoredCells] = useState([]);\n  const [nextColorIdentSort, setNextnextColorIdentSort] = useState('ascending');\n  const [nextIdSort, setNextIdSort] = useState('ascending');\n  useEffect(() => {\n    const newArray = [];\n    for (let i = 1; i <= numberOfObjects; i++) {\n      let randomIdentForObject = randomColorIdentifier(colorIdents);\n      newArray.push({\n        id: makeUniqueId('random', i.toString()),\n        name: generateRandomWord(),\n        description: generateRandomWord(),\n        colorIdentifier: randomIdentForObject\n      });\n    }\n    setFilteredObjectsArray([...newArray]);\n    setObjectsArray([...newArray]);\n  }, []); //na konci prazdne pole, projde tedy pouze jednou pri page load \n\n  // filtruju podle barevneho identifikatoru\n  const handleInputFilter = inputValue => {\n    inputValue = inputValue.replace(/\\s/g, ''); // odstranim mezery\n    console.log('text z inputu: ' + inputValue);\n\n    // include asi snazsi, dalo by se dotahnout do lepsiho stavu\n    // const filteredResult = objectsArray.filter((item) =>\n    //     item.colorIdentifier.toLowerCase().includes(inputValue.toLowerCase())\n    // );\n\n    // metoda filtr mi vrati pouze elementy, ktere splni podminku\n    const filteredResult = objectsArray.filter(item =>\n    // object.values spolecne se some projde kazdy prop objektu (vytvori se pole hodnot)\n    Object.values(item).some(property => typeof property === 'string' && property.toLowerCase().includes(inputValue.toLowerCase())));\n    setFilteredObjectsArray(filteredResult);\n\n    // projekt vyfiltrovane objekty a smazat objekty, ktere se vypisuji jako drive oznacene\n  };\n\n  // muze nastat to, ze se vypise oznacene policko, ktere kvuli fitru neni videt\n  // po rerendru orig statu by bylo dobre projit oznacena pola a zase je oznacit - pripadne smazat z oznacenych\n  const handleTableDataClick = target => {\n    let cellColorIdent = target.parentElement.className;\n    let cellColor = '';\n    let cellRowId = target.parentElement.getAttribute(\"data-row-id\");\n    let currentCellsIds = [...tableDataColoredCells];\n    colorIdents.filter(iden => {\n      if (iden.ident === cellColorIdent) {\n        cellColor = iden.props.color;\n      }\n    });\n    if (target.style.backgroundColor === 'white' || target.getAttribute(\"style\") === null) {\n      // barevne\n      target.style.backgroundColor = cellColor;\n\n      // if ( !currentCellsIds.includes(cellRowId) ) {\n      currentCellsIds = [...currentCellsIds, cellRowId];\n      // }\n\n      setTableDataColoredCells(currentCellsIds);\n    } else {\n      // NEbarevne\n      target.style.backgroundColor = 'white';\n      // currentCellsIds = currentCellsIds.filter(cellId => cellId !== cellRowId);\n\n      // blbe reseni, nutne resit pres filtr, ale pokud je vice policek v jednom radku, \n      // tak je treba delat count daneho ID - bud udelat pole objektu, nebo python list, kde se da ciselne indexovat\n      let index = currentCellsIds.indexOf(cellRowId);\n      if (index !== -1) {\n        currentCellsIds.splice(index, 1);\n      }\n      setTableDataColoredCells(currentCellsIds);\n    }\n    console.log(\"cellRowId: \" + cellRowId);\n  };\n\n  // console.log(objectsArray);\n  // console.log(filteredObjectsArray);\n  console.log(tableDataColoredCells);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"\",\n      id: \"\",\n      className: \"input-filtr\",\n      onChange: e => handleInputFilter(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"coloredCells\",\n      children: tableDataColoredCells.map(dataCell => `${dataCell}`).join(', ')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      id: \"mainDataTable\",\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        filteredObjectsArray: filteredObjectsArray,\n        nextIdSort: nextIdSort,\n        setNextIdSort: setNextIdSort,\n        setFilteredObjectsArray: setFilteredObjectsArray,\n        nextColorIdentSort: nextColorIdentSort,\n        setNextnextColorIdentSort: setNextnextColorIdentSort\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: filteredObjectsArray.map(object => /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: object.colorIdentifier,\n          \"data-row-id\": object.id,\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"table-data-id\",\n            onClick: e => handleTableDataClick(e.target),\n            children: object.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"table-data-name\",\n            onClick: e => handleTableDataClick(e.target),\n            children: object.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"table-data-description\",\n            onClick: e => handleTableDataClick(e.target),\n            children: object.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"table-data-colorIdentifier\",\n            onClick: e => handleTableDataClick(e.target),\n            children: object.colorIdentifier\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 29\n          }, this)]\n        }, object.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"rblZ0f+GUAqTp57+6zV+Xswh2uk=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","TableHead","jsxDEV","_jsxDEV","numberOfObjects","colorIdents","ident","props","color","alphabet","getRandomNumber","randomDecimal","Math","random","randomNumber","floor","getRandomIntMinMax","min","max","ceil","generateRandomWord","randomWord","map","word","length","makeUniqueId","base","i","randomColorIdentifier","colors","randomArrayIndex","App","_s","objectsArray","setObjectsArray","filteredObjectsArray","setFilteredObjectsArray","tableDataColoredCells","setTableDataColoredCells","nextColorIdentSort","setNextnextColorIdentSort","nextIdSort","setNextIdSort","newArray","randomIdentForObject","push","id","toString","name","description","colorIdentifier","handleInputFilter","inputValue","replace","console","log","filteredResult","filter","item","Object","values","some","property","toLowerCase","includes","handleTableDataClick","target","cellColorIdent","parentElement","className","cellColor","cellRowId","getAttribute","currentCellsIds","iden","style","backgroundColor","index","indexOf","splice","children","type","onChange","e","value","fileName","_jsxFileName","lineNumber","columnNumber","dataCell","join","object","onClick","_c","$RefreshReg$"],"sources":["/Users/petrstastny/Desktop/testApps/safecontrol-ukol/ukol-stastny/src/App.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { TableHead } from './TableHead';\nimport './App.css';\n\ntype ObjectType = {\n    id: string;\n    name: string,\n    description: string,\n    colorIdentifier: string,\n    // zde pridat dalsi props\n}\nconst numberOfObjects = 10;\n\nconst colorIdents = [{\n    ident: 'un',\n    props: {\n        color: 'red'\n    }\n}, {\n    ident: 'deux',\n    props: {\n        color: 'green'\n    }\n}, {\n    ident: 'trois',\n    props: {\n        color: 'blue'\n    }\n}]\n\nconst alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n\nconst getRandomNumber = (): number => {\n    const randomDecimal = Math.random();\n  \n    // Scale the random decimal to the range [0, 1, 2]\n    const randomNumber = Math.floor(randomDecimal * 3); // 3 because we want numbers from 0 to 2\n    return randomNumber;\n};\n\nconst getRandomIntMinMax = (min: number, max: number) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min); // The maximum is exclusive and the minimum is inclusive\n}\n\nconst generateRandomWord = () => {\n    let randomWord: string = '';\n\n    alphabet.map(word => {\n        randomWord += alphabet[getRandomIntMinMax(0, alphabet.length)];\n    })\n\n    return randomWord;\n}\n\nconst makeUniqueId = (base: String, i: String) => `${base}-${i}`;\n\n// vyresit colors: any - zkusit nadefinovat vlastni typ\nconst randomColorIdentifier = (colors: any) => {\n    let randomArrayIndex = getRandomNumber();\n    // nekontroluju delku pole, vim, ze se vejdu\n    return colors[randomArrayIndex].ident;\n}   \n\nexport default function App() {\n\n    const [objectsArray, setObjectsArray] = useState<ObjectType[]>([]);\n    const [filteredObjectsArray, setFilteredObjectsArray] = useState<ObjectType[]>([]);\n    const [tableDataColoredCells, setTableDataColoredCells] = useState<string[]>([]);\n    const [nextColorIdentSort, setNextnextColorIdentSort] = useState<string>('ascending');\n    const [nextIdSort, setNextIdSort] = useState<string>('ascending');\n\n    useEffect(() => {\n\n        const newArray: ObjectType[] = [];\n        \n        for (let i = 1; i <= numberOfObjects; i++) {\n            let randomIdentForObject: string = randomColorIdentifier(colorIdents);\n\n            newArray.push({\n                id: makeUniqueId('random', i.toString()),\n                name: generateRandomWord(),\n                description: generateRandomWord(),\n                colorIdentifier: randomIdentForObject,\n            });\n        }\n\n        setFilteredObjectsArray([...newArray]);\n        setObjectsArray([...newArray]);\n\n    }, []); //na konci prazdne pole, projde tedy pouze jednou pri page load \n\n    // filtruju podle barevneho identifikatoru\n    const handleInputFilter = (inputValue: string) => {\n        inputValue = inputValue.replace(/\\s/g, ''); // odstranim mezery\n        console.log('text z inputu: ' + inputValue);\n\n        // include asi snazsi, dalo by se dotahnout do lepsiho stavu\n        // const filteredResult = objectsArray.filter((item) =>\n        //     item.colorIdentifier.toLowerCase().includes(inputValue.toLowerCase())\n        // );\n\n        // metoda filtr mi vrati pouze elementy, ktere splni podminku\n        const filteredResult = objectsArray.filter((item) => \n            // object.values spolecne se some projde kazdy prop objektu (vytvori se pole hodnot)\n            Object.values(item).some((property) =>\n            typeof property === 'string' && property.toLowerCase().includes(inputValue.toLowerCase())\n            )\n        );\n\n        setFilteredObjectsArray(filteredResult);\n\n        // projekt vyfiltrovane objekty a smazat objekty, ktere se vypisuji jako drive oznacene\n    }\n\n    // muze nastat to, ze se vypise oznacene policko, ktere kvuli fitru neni videt\n    // po rerendru orig statu by bylo dobre projit oznacena pola a zase je oznacit - pripadne smazat z oznacenych\n    const handleTableDataClick = (target: any) => {\n        let cellColorIdent: string = target.parentElement.className;\n        let cellColor: string = '';\n        let cellRowId: string = target.parentElement.getAttribute(\"data-row-id\");\n        let currentCellsIds: string[] = [...tableDataColoredCells];\n\n        colorIdents.filter(iden => {\n            if ( iden.ident === cellColorIdent ) {\n                cellColor = iden.props.color\n            }\n        });\n\n        if ( target.style.backgroundColor === 'white' || target.getAttribute(\"style\") === null ) {\n            // barevne\n            target.style.backgroundColor = cellColor;\n\n            // if ( !currentCellsIds.includes(cellRowId) ) {\n                currentCellsIds = [...currentCellsIds, cellRowId]\n            // }\n\n            setTableDataColoredCells(currentCellsIds);\n\n        }\n        else {\n            // NEbarevne\n            target.style.backgroundColor = 'white';\n            // currentCellsIds = currentCellsIds.filter(cellId => cellId !== cellRowId);\n\n            // blbe reseni, nutne resit pres filtr, ale pokud je vice policek v jednom radku, \n            // tak je treba delat count daneho ID - bud udelat pole objektu, nebo python list, kde se da ciselne indexovat\n            let index = currentCellsIds.indexOf(cellRowId);\n            if (index !== -1) {\n                currentCellsIds.splice(index, 1);\n              }\n\n            \n            setTableDataColoredCells(currentCellsIds);\n        }\n        \n        console.log(\"cellRowId: \" + cellRowId);\n    };\n\n    // console.log(objectsArray);\n    // console.log(filteredObjectsArray);\n    console.log(tableDataColoredCells);\n\n    return (\n        <div className='container'>\n            <input type=\"text\" name=\"\" id=\"\" className='input-filtr' onChange={(e) => handleInputFilter(e.target.value)} />\n            <p id=\"coloredCells\">\n                {tableDataColoredCells.map(dataCell =>  `${dataCell}`).join(', ')}\n            </p>\n\n            <table id='mainDataTable'>\n\n                {/* popremyslet, jestli by nebylo lepsi pridat eventListener na th a td */}\n\n                <TableHead \n                    filteredObjectsArray={filteredObjectsArray} \n                    nextIdSort={nextIdSort} \n                    setNextIdSort={setNextIdSort} \n                    setFilteredObjectsArray={setFilteredObjectsArray}\n                    nextColorIdentSort = {nextColorIdentSort}\n                    setNextnextColorIdentSort = {setNextnextColorIdentSort}\n                />\n\n                <tbody>\n\n                    {filteredObjectsArray.map((object) => (\n                        <tr className={object.colorIdentifier} data-row-id={object.id} key={object.id}>\n                            <td className='table-data-id' onClick={(e) => handleTableDataClick(e.target)}>{object.id}</td>\n                            <td className='table-data-name' onClick={(e) => handleTableDataClick(e.target)}>{object.name}</td>\n                            <td className='table-data-description' onClick={(e) => handleTableDataClick(e.target)}>{object.description}</td>\n                            <td className='table-data-colorIdentifier' onClick={(e) => handleTableDataClick(e.target)}>{object.colorIdentifier}</td>\n                        </tr>\n                    ))}\n\n                </tbody>\n\n            </table>\n        </div>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}