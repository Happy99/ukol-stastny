{"ast":null,"code":"var _jsxFileName = \"/Users/petrstastny/Desktop/testApps/safecontrol-ukol/ukol-stastny/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// type CellType = {\n\n// }\n\n// type ColorIdentType = {\n//     ident: string,\n//     props: \n// }\nexport default function App() {\n  _s();\n  const [objectsArray, setObjectsArray] = useState([]);\n  const [filteredObjectsArray, setFilteredObjectsArray] = useState([]);\n  const [tableDataColoredCells, setTableDataColoredCells] = useState([]);\n  const [nextColorIdentSort, setNextnextColorIdentSort] = useState('ascending');\n  const [nextIdSort, setNextIdSort] = useState('ascending');\n  const colorIdents = [{\n    ident: 'un',\n    props: {\n      color: 'red'\n    }\n  }, {\n    ident: 'deux',\n    props: {\n      color: 'green'\n    }\n  }, {\n    ident: 'trois',\n    props: {\n      color: 'blue'\n    }\n  }];\n  useEffect(() => {\n    const newArray = [];\n    const numberOfObjects = 10;\n    for (let i = 1; i <= numberOfObjects; i++) {\n      let randomIdentForObject = randomColorIdentifier(colorIdents);\n      newArray.push({\n        id: makeUniqueId('random', i.toString()),\n        name: '',\n        description: '',\n        colorIdentifier: randomIdentForObject\n      });\n    }\n    setFilteredObjectsArray([...newArray]);\n    setObjectsArray([...newArray]);\n  }, []); //na konci prazdne pole, projde tedy pouze jednou pri page load\n\n  const getRandomNumber = () => {\n    const randomDecimal = Math.random();\n\n    // Scale the random decimal to the range [0, 1, 2]\n    const randomNumber = Math.floor(randomDecimal * 3); // 3 because we want numbers from 0 to 2\n    return randomNumber;\n  };\n  const makeUniqueId = (base, i) => `${base}-${i}`;\n\n  // vyresit colors: any - zkusit nadefinovat vlastni typ\n  const randomColorIdentifier = colors => {\n    let randomArrayIndex = getRandomNumber();\n    // nekontroluju delku pole, vim, ze se vejdu\n    return colors[randomArrayIndex].ident;\n  };\n\n  // filtruju podle barevneho identifikatoru\n  const handleInputFilter = inputValue => {\n    inputValue = inputValue.replace(/\\s/g, ''); // odstranim mezery\n    console.log('text z inputu: ' + inputValue);\n\n    // include asi snazsi, dalo by se dotahnout do lepsiho stavu\n    // const filteredResult = objectsArray.filter((item) =>\n    //     item.colorIdentifier.toLowerCase().includes(inputValue.toLowerCase())\n    // );\n\n    // metoda filtr mi vrati pouze elementy, ktere splni podminku\n    const filteredResult = objectsArray.filter(item =>\n    // object.values spolecne se some projde kazdy prop objektu (vytvori se pole hodnot)\n    Object.values(item).some(property => typeof property === 'string' && property.toLowerCase().includes(inputValue.toLowerCase())));\n    setFilteredObjectsArray(filteredResult);\n\n    // const newTableDataColoredCells = tableDataColoredCells.filter((colored) => {\n    //     filteredResult.map(result => {\n    //         result.includes(colored.colorIdentifier);\n    //     })\n\n    // });\n\n    // setTableDataColoredCells(newTableDataColoredCells);\n  };\n\n  // muze nastat to, ze se vypise oznacene policko, ktere kvuli fitru neni videt\n  // po rerendru orig statu by bylo dobre projit oznacena pola a zase je oznacit - pripadne smazat z oznacenych\n  const handleTableDataClick = target => {\n    let cellColorIdent = target.parentElement.className;\n    let cellColor = '';\n    let cellRowId = target.parentElement.getAttribute(\"data-row-id\");\n    let currentCellsIds = [...tableDataColoredCells];\n    colorIdents.filter(iden => {\n      if (iden.ident === cellColorIdent) {\n        cellColor = iden.props.color;\n      }\n    });\n    if (target.style.backgroundColor === 'white' || target.getAttribute(\"style\") === null) {\n      // barevne\n      target.style.backgroundColor = cellColor;\n\n      // if ( !currentCellsIds.includes(cellRowId) ) {\n      currentCellsIds = [...currentCellsIds, cellRowId];\n      // }\n\n      setTableDataColoredCells(currentCellsIds);\n    } else {\n      // NEbarevne\n      target.style.backgroundColor = 'white';\n      // currentCellsIds = currentCellsIds.filter(cellId => cellId !== cellRowId);\n\n      // blbe reseni, nutne resit pres filtr, ale pokud je vice policek v jednom radku, \n      // tak je treba delat count daneho ID - bud udelat pole objektu, nebo python list, kde se da ciselne indexovat\n      let index = currentCellsIds.indexOf(cellRowId);\n      if (index !== -1) {\n        currentCellsIds.splice(index, 1);\n      }\n      setTableDataColoredCells(currentCellsIds);\n    }\n    console.log(\"cellRowId: \" + cellRowId);\n  };\n  const handleTableHeadClick = sortBy => {\n    // mozna by slo udelat pouze pres funkci sort a object1.sortBy\n    switch (sortBy) {\n      case 'id':\n        let filterIdArray = [...filteredObjectsArray];\n\n        // zde nutno dodelat ciselny sort, abecedni nebude dobre fungovat\n        if (nextIdSort === 'ascending') {\n          filterIdArray.sort((o_one, o_two) => {\n            if (o_one.id > o_two.id) {\n              return -1;\n            }\n            if (o_one.id < o_two.id) {\n              return 1;\n            }\n            setNextIdSort('descending');\n            return 0;\n          });\n        } else {\n          filterIdArray.sort((o_one, o_two) => {\n            if (o_one.id < o_two.id) {\n              return -1;\n            }\n            if (o_one.id > o_two.id) {\n              return 1;\n            }\n            setNextIdSort('ascending');\n            return 0;\n          });\n        }\n        setFilteredObjectsArray(filterIdArray);\n        break;\n      case 'name':\n        break;\n      case 'description':\n        break;\n      case 'colorIdentifier':\n        console.log('filtr colorIdentifier');\n        let filterCiArray = [...filteredObjectsArray];\n        console.log(\"filtr puvodni: \" + filterCiArray);\n        console.log(\"nextColorIdentSort: \" + nextColorIdentSort);\n        if (nextColorIdentSort === 'ascending') {\n          filterCiArray.sort((o_one, o_two) => {\n            if (o_one.colorIdentifier > o_two.colorIdentifier) {\n              return -1;\n            }\n            if (o_one.colorIdentifier < o_two.colorIdentifier) {\n              return 1;\n            }\n            setNextnextColorIdentSort('descending');\n            return 0;\n          });\n        } else {\n          filterCiArray.sort((o_one, o_two) => {\n            if (o_one.colorIdentifier < o_two.colorIdentifier) {\n              return -1;\n            }\n            if (o_one.colorIdentifier > o_two.colorIdentifier) {\n              return 1;\n            }\n            setNextnextColorIdentSort('ascending');\n            return 0;\n          });\n        }\n        console.log(filterCiArray);\n        setFilteredObjectsArray(filterCiArray);\n        break;\n      default:\n        break;\n    }\n  };\n\n  // console.log(objectsArray);\n  // console.log(filteredObjectsArray);\n  console.log(tableDataColoredCells);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"\",\n      id: \"\",\n      className: \"input-filtr\",\n      onChange: e => handleInputFilter(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"coloredCells\",\n      children: tableDataColoredCells.map(dataCell => `${dataCell}`).join(', ')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      id: \"mainDataTable\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: () => handleTableHeadClick('id'),\n            children: \"Id\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: () => handleTableHeadClick('name'),\n            children: \"N\\xE1zev\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: () => handleTableHeadClick('description'),\n            children: \"Popis\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: () => handleTableHeadClick('colorIdentifier'),\n            children: \"Barevn\\xFD identifik\\xE1tor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: filteredObjectsArray.map(object => /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: object.colorIdentifier,\n          \"data-row-id\": object.id,\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"table-data-id\",\n            onClick: e => handleTableDataClick(e.target),\n            children: object.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"table-data-name\",\n            onClick: e => handleTableDataClick(e.target),\n            children: object.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"table-data-description\",\n            onClick: e => handleTableDataClick(e.target),\n            children: object.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"table-data-colorIdentifier\",\n            onClick: e => handleTableDataClick(e.target),\n            children: object.colorIdentifier\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 29\n          }, this)]\n        }, object.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 261,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"rblZ0f+GUAqTp57+6zV+Xswh2uk=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","objectsArray","setObjectsArray","filteredObjectsArray","setFilteredObjectsArray","tableDataColoredCells","setTableDataColoredCells","nextColorIdentSort","setNextnextColorIdentSort","nextIdSort","setNextIdSort","colorIdents","ident","props","color","newArray","numberOfObjects","i","randomIdentForObject","randomColorIdentifier","push","id","makeUniqueId","toString","name","description","colorIdentifier","getRandomNumber","randomDecimal","Math","random","randomNumber","floor","base","colors","randomArrayIndex","handleInputFilter","inputValue","replace","console","log","filteredResult","filter","item","Object","values","some","property","toLowerCase","includes","handleTableDataClick","target","cellColorIdent","parentElement","className","cellColor","cellRowId","getAttribute","currentCellsIds","iden","style","backgroundColor","index","indexOf","splice","handleTableHeadClick","sortBy","filterIdArray","sort","o_one","o_two","filterCiArray","children","type","onChange","e","value","fileName","_jsxFileName","lineNumber","columnNumber","map","dataCell","join","onClick","object","_c","$RefreshReg$"],"sources":["/Users/petrstastny/Desktop/testApps/safecontrol-ukol/ukol-stastny/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\ntype ObjectType = {\n    id: string;\n    name: string,\n    description: string,\n    colorIdentifier: string,\n    // zde pridat dalsi props\n}\n\n// type CellType = {\n\n// }\n\n// type ColorIdentType = {\n//     ident: string,\n//     props: \n// }\n\nexport default function App() {\n\n    const [objectsArray, setObjectsArray] = useState<ObjectType[]>([]);\n    const [filteredObjectsArray, setFilteredObjectsArray] = useState<ObjectType[]>([]);\n    const [tableDataColoredCells, setTableDataColoredCells] = useState<string[]>([]);\n    const [nextColorIdentSort, setNextnextColorIdentSort] = useState<string>('ascending');\n    const [nextIdSort, setNextIdSort] = useState<string>('ascending');\n\n    const colorIdents = [{\n        ident: 'un',\n        props: {\n            color: 'red'\n        }\n    }, {\n        ident: 'deux',\n        props: {\n            color: 'green'\n        }\n    }, {\n        ident: 'trois',\n        props: {\n            color: 'blue'\n        }\n    }]\n\n    useEffect(() => {\n\n        const newArray: ObjectType[] = [];\n        const numberOfObjects = 10;\n        \n        for (let i = 1; i <= numberOfObjects; i++) {\n            let randomIdentForObject: string = randomColorIdentifier(colorIdents);\n\n            newArray.push({\n                id: makeUniqueId('random', i.toString()),\n                name: '',\n                description: '',\n                colorIdentifier: randomIdentForObject,\n            });\n        }\n\n        setFilteredObjectsArray([...newArray]);\n        setObjectsArray([...newArray]);\n\n    }, []); //na konci prazdne pole, projde tedy pouze jednou pri page load\n\n    const getRandomNumber = (): number => {\n        const randomDecimal = Math.random();\n      \n        // Scale the random decimal to the range [0, 1, 2]\n        const randomNumber = Math.floor(randomDecimal * 3); // 3 because we want numbers from 0 to 2\n        return randomNumber;\n    };\n\n    const makeUniqueId = (base: String, i: String) => `${base}-${i}`;\n\n    // vyresit colors: any - zkusit nadefinovat vlastni typ\n    const randomColorIdentifier = (colors: any) => {\n        let randomArrayIndex = getRandomNumber();\n        // nekontroluju delku pole, vim, ze se vejdu\n        return colors[randomArrayIndex].ident;\n    }    \n\n    // filtruju podle barevneho identifikatoru\n    const handleInputFilter = (inputValue: string) => {\n        inputValue = inputValue.replace(/\\s/g, ''); // odstranim mezery\n        console.log('text z inputu: ' + inputValue);\n\n        // include asi snazsi, dalo by se dotahnout do lepsiho stavu\n        // const filteredResult = objectsArray.filter((item) =>\n        //     item.colorIdentifier.toLowerCase().includes(inputValue.toLowerCase())\n        // );\n\n        // metoda filtr mi vrati pouze elementy, ktere splni podminku\n        const filteredResult = objectsArray.filter((item) => \n            // object.values spolecne se some projde kazdy prop objektu (vytvori se pole hodnot)\n            Object.values(item).some((property) =>\n            typeof property === 'string' && property.toLowerCase().includes(inputValue.toLowerCase())\n            )\n        );\n\n        setFilteredObjectsArray(filteredResult);\n\n        // const newTableDataColoredCells = tableDataColoredCells.filter((colored) => {\n        //     filteredResult.map(result => {\n        //         result.includes(colored.colorIdentifier);\n        //     })\n            \n            \n        // });\n\n        // setTableDataColoredCells(newTableDataColoredCells);\n\n    }\n\n    // muze nastat to, ze se vypise oznacene policko, ktere kvuli fitru neni videt\n    // po rerendru orig statu by bylo dobre projit oznacena pola a zase je oznacit - pripadne smazat z oznacenych\n    const handleTableDataClick = (target: any) => {\n        let cellColorIdent: string = target.parentElement.className;\n        let cellColor: string = '';\n        let cellRowId: string = target.parentElement.getAttribute(\"data-row-id\");\n        let currentCellsIds: string[] = [...tableDataColoredCells];\n\n        colorIdents.filter(iden => {\n            if ( iden.ident === cellColorIdent ) {\n                cellColor = iden.props.color\n            }\n        });\n\n        if ( target.style.backgroundColor === 'white' || target.getAttribute(\"style\") === null ) {\n            // barevne\n            target.style.backgroundColor = cellColor;\n\n            // if ( !currentCellsIds.includes(cellRowId) ) {\n                currentCellsIds = [...currentCellsIds, cellRowId]\n            // }\n\n            setTableDataColoredCells(currentCellsIds);\n\n        }\n        else {\n            // NEbarevne\n            target.style.backgroundColor = 'white';\n            // currentCellsIds = currentCellsIds.filter(cellId => cellId !== cellRowId);\n\n            // blbe reseni, nutne resit pres filtr, ale pokud je vice policek v jednom radku, \n            // tak je treba delat count daneho ID - bud udelat pole objektu, nebo python list, kde se da ciselne indexovat\n            let index = currentCellsIds.indexOf(cellRowId);\n            if (index !== -1) {\n                currentCellsIds.splice(index, 1);\n              }\n\n            \n            setTableDataColoredCells(currentCellsIds);\n        }\n        \n        console.log(\"cellRowId: \" + cellRowId);\n    };\n\n    const handleTableHeadClick = (sortBy: string) => {\n\n        // mozna by slo udelat pouze pres funkci sort a object1.sortBy\n        switch (sortBy) {\n            case 'id':\n                let filterIdArray = [...filteredObjectsArray];\n\n                // zde nutno dodelat ciselny sort, abecedni nebude dobre fungovat\n                if ( nextIdSort ===  'ascending') {\n                    filterIdArray.sort((o_one: any, o_two: any) => {\n    \n                        if (o_one.id > o_two.id) {\n                            return -1;\n                        }\n                        if (o_one.id < o_two.id) {\n                            return 1;\n                        }            \n    \n                        setNextIdSort('descending');\n                        return 0;\n                    });\n                }\n                else {\n                    filterIdArray.sort((o_one: any, o_two: any) => {\n    \n                        if (o_one.id < o_two.id) {\n                            return -1;\n                        }\n                        if (o_one.id > o_two.id) {\n                            return 1;\n                        }            \n    \n                        setNextIdSort('ascending');\n                        return 0;\n                    });                    \n                }\n\n                setFilteredObjectsArray(filterIdArray);\n\n                break;\n\n            case 'name':\n            \n                break;\n\n            case 'description':\n            \n                break;\n\n            case 'colorIdentifier':\n                console.log('filtr colorIdentifier');\n                let filterCiArray = [...filteredObjectsArray];\n\n                console.log(\"filtr puvodni: \" + filterCiArray);\n                console.log(\"nextColorIdentSort: \" + nextColorIdentSort);\n\n                if ( nextColorIdentSort ===  'ascending') {\n                    filterCiArray.sort((o_one: any, o_two: any) => {\n    \n                        if (o_one.colorIdentifier > o_two.colorIdentifier) {\n                            return -1;\n                        }\n                        if (o_one.colorIdentifier < o_two.colorIdentifier) {\n                            return 1;\n                        }            \n    \n                        setNextnextColorIdentSort('descending');\n                        return 0;\n                    });\n                }\n                else {\n                    filterCiArray.sort((o_one: any, o_two: any) => {\n    \n                        if (o_one.colorIdentifier < o_two.colorIdentifier) {\n                            return -1;\n                        }\n                        if (o_one.colorIdentifier > o_two.colorIdentifier) {\n                            return 1;\n                        }            \n    \n                        setNextnextColorIdentSort('ascending');\n                        return 0;\n                    });                    \n                }\n\n                console.log(filterCiArray);\n                setFilteredObjectsArray(filterCiArray);\n\n                break;\n\n            default:\n                break;\n        }\n        \n    }\n\n    // console.log(objectsArray);\n    // console.log(filteredObjectsArray);\n    console.log(tableDataColoredCells);\n\n    return (\n        <div className='container'>\n            <input type=\"text\" name=\"\" id=\"\" className='input-filtr' onChange={(e) => handleInputFilter(e.target.value)} />\n            <p id=\"coloredCells\">\n                {tableDataColoredCells.map(dataCell =>  `${dataCell}`).join(', ')}\n            </p>\n\n            <table id='mainDataTable'>\n\n                {/* popremyslet, jestli by nebylo lepsi pridat eventListener na th a td */}\n\n                <thead>\n                    <tr>\n                        <th onClick={() => handleTableHeadClick('id')}>Id</th>\n                        <th onClick={() => handleTableHeadClick('name')}>Název</th>\n                        <th onClick={() => handleTableHeadClick('description')}>Popis</th>\n                        <th onClick={() => handleTableHeadClick('colorIdentifier')}>Barevný identifikátor</th>\n                    </tr>\n                </thead>\n\n                <tbody>\n\n                    {filteredObjectsArray.map((object) => (\n                        <tr className={object.colorIdentifier} data-row-id={object.id} key={object.id}>\n                            <td className='table-data-id' onClick={(e) => handleTableDataClick(e.target)}>{object.id}</td>\n                            <td className='table-data-name' onClick={(e) => handleTableDataClick(e.target)}>{object.name}</td>\n                            <td className='table-data-description' onClick={(e) => handleTableDataClick(e.target)}>{object.description}</td>\n                            <td className='table-data-colorIdentifier' onClick={(e) => handleTableDataClick(e.target)}>{object.colorIdentifier}</td>\n                        </tr>\n                    ))}\n\n                </tbody>\n\n            </table>\n        </div>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}